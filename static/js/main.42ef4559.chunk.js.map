{"version":3,"sources":["reducers/index.js","reducers/todosReducer.js","actions/ACTION_TYPES.js","reducers/activeTodosReducer.js","reducers/completedTodosReducer.js","reducers/isToggledReducer.js","reducers/groupsReducer.js","actions/index.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/Todos/Todos.js","components/CustomGroups/CustomGroups.js","components/Sidebar/Sidebar.js","components/App/App.js","index.js"],"names":["combineReducers","todos","itemPosition","state","action","type","item","payload","ticked","starred","key","length","group","difference","start","end","startingPoint","indexOf","filter","placeholder","console","log","splice","slice","name","activeTodos","filterKey","Object","keys","term","isToggled","completedTodos","groups","groupList","toggleTodo","toggleStar","filterTodos","dispatch","getState","toggleCompleted","selectGroup","TodoInput","inputVal","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","handleClick","className","onSubmit","this","onChange","onClick","React","Component","connect","todo","TodoItem","map","d","points","cx","cy","r","index","draggableId","String","provided","draggableProps","dragHandleProps","ref","innerRef","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","alt","renderCircle","Todos","droppableId","snapshot","droppableProps","style","backgroundColor","isDraggingOver","CustomGroups","input","addGroup","handleDelete","deleteGroup","handleGroupChange","x1","y1","x2","y2","Sidebar","x","y","App","onDragEnd","source","destination","rearrangeTodos","Number","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42ef4559.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\nimport todosReducer from \"./todosReducer\";\nimport activeTodosReducer from \"./activeTodosReducer\";\nimport completedTodosReducer from \"./completedTodosReducer\";\nimport isToggledReducer from \"./isToggledReducer\";\nimport groupsReducer from \"./groupsReducer\";\n\nexport default combineReducers({\n  todos: todosReducer,\n  activeTodos: activeTodosReducer,\n  completedTodos: completedTodosReducer,\n  isToggled: isToggledReducer,\n  groups: groupsReducer,\n});\n","import {\n  ADD_TODO,\n  TOGGLE_TODO,\n  TOGGLE_STAR,\n  REARRANGE_TODOS,\n  DELETE_GROUP,\n} from \"../actions/ACTION_TYPES\";\n\nexport default function todosReducer(state = [], action) {\n  let itemPosition;\n  switch (action.type) {\n    case ADD_TODO:\n      // A new todo with all of its needed information is added to the current state\n      return [\n        ...state,\n        {\n          item: action.payload,\n          ticked: false,\n          starred: false,\n          key: state.length,\n          group: action.group,\n        },\n      ];\n\n    case REARRANGE_TODOS:\n      let difference = action.start - action.end;\n      let startingPoint = state.indexOf(\n        state.filter((item) => item.key === action.key)[0]\n      );\n\n      let placeholder = state[startingPoint];\n      console.log(startingPoint, placeholder);\n      state.splice(startingPoint, 1);\n      state.splice(startingPoint - difference, 0, placeholder);\n\n      return [...state];\n\n    case TOGGLE_TODO:\n      // The toggled todo is grabbed and the ticked value is updated\n      itemPosition = state.indexOf(\n        state.filter((item) => item.key === action.key)[0]\n      );\n      return [\n        ...state.slice(0, itemPosition),\n        {\n          ...state[itemPosition],\n          ticked: !state[itemPosition].ticked,\n        },\n        ...state.slice(itemPosition + 1),\n      ];\n\n    case TOGGLE_STAR:\n      // Same as above, except star value is changed\n      itemPosition = state.indexOf(\n        state.filter((item) => item.key === action.key)[0]\n      );\n      return [\n        ...state.slice(0, itemPosition),\n        {\n          ...state[itemPosition],\n          starred: !state[itemPosition].starred,\n        },\n        ...state.slice(itemPosition + 1),\n      ];\n\n    case DELETE_GROUP:\n      return state.filter((item) => item.group !== action.name);\n\n    default:\n      return state;\n  }\n}\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const TOGGLE_STAR = \"TOGGLE_STAR\";\nexport const FILTER_TODOS = \"FILTER_TODOS\";\nexport const REARRANGE_TODOS = \"REARRANGE_TODOS\";\nexport const TOGGLE_COMPLETED = \"TOGGLE_COMPLETED\";\nexport const ADD_GROUP = \"ADD_GROUP\";\nexport const DELETE_GROUP = \"DELETE_GROUP\";\nexport const SELECT_GROUP = \"SELECT_GROUP\";\n","import { FILTER_TODOS, TOGGLE_COMPLETED } from \"../actions/ACTION_TYPES\";\n\nexport default function activeTodosReducer(state = [], action) {\n  switch (action.type) {\n    case FILTER_TODOS:\n      // grabs the key to sort by from the action object\n      let filterKey = Object.keys(action.term)[0];\n      // the entire todo list state is passed in from the todos store\n      return action.payload.filter(\n        // filters by the passed in parameter\n        (item) => item[filterKey] === action.term[filterKey]\n      );\n\n    case TOGGLE_COMPLETED:\n      return action.isToggled\n        ? // If isToggled is true, then the ticked items are filtered out of the shown todos\n          [...state.filter((item) => item.ticked === false)]\n        : // When isToggled is false, the payload is taken from the completedTodos store and appended to the list\n          [...state, ...action.payload];\n    default:\n      return state;\n  }\n}\n","import { TOGGLE_COMPLETED } from \"../actions/ACTION_TYPES\";\n\nexport default function completedTodosReducer(state = [], action) {\n  switch (action.type) {\n    case TOGGLE_COMPLETED:\n      if (action.isToggled) {\n        // When isToggled is true, the payload passed is all the active todos, which then can be stored\n        // in completedTodos, ready to passed when ToggleCompleted is called again\n        return [...action.payload.filter((item) => item.ticked)];\n      } else {\n        return [];\n      }\n\n    default:\n      return state;\n  }\n}\n","import { TOGGLE_COMPLETED } from \"../actions/ACTION_TYPES\";\n\nexport default function isToggledReducer(state = false, action) {\n  switch (action.type) {\n    case TOGGLE_COMPLETED:\n      return action.isToggled;\n\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_GROUP,\n  DELETE_GROUP,\n  SELECT_GROUP,\n  FILTER_TODOS,\n} from \"../actions/ACTION_TYPES\";\n\nexport default function groupsReducer(\n  state = { group: \"\", filter: {}, groupList: [] },\n  action\n) {\n  switch (action.type) {\n    case ADD_GROUP:\n      return {\n        ...state,\n        groupList: [\n          ...state.groupList,\n          { name: action.payload, key: state.groupList.length },\n        ],\n      };\n\n    case DELETE_GROUP:\n      return {\n        ...state,\n        groupList: [\n          ...state.groupList.filter((item) => item.key !== action.payload),\n        ],\n      };\n    case SELECT_GROUP:\n      return {\n        ...state,\n        group: action.payload,\n      };\n    case FILTER_TODOS:\n      return {\n        ...state,\n        filter: { ...action.term },\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_TODO,\n  TOGGLE_TODO,\n  TOGGLE_STAR,\n  FILTER_TODOS,\n  REARRANGE_TODOS,\n  TOGGLE_COMPLETED,\n  ADD_GROUP,\n  DELETE_GROUP,\n  SELECT_GROUP,\n} from \"./ACTION_TYPES\";\n\nexport const addTodo = (todo) => (dispatch, getState) => {\n  const group = getState().groups.group;\n\n  dispatch({\n    type: ADD_TODO,\n    payload: todo,\n    group: group,\n  });\n};\n\nexport const toggleTodo = (key) => {\n  return {\n    type: TOGGLE_TODO,\n    key,\n  };\n};\n\nexport const toggleStar = (key) => {\n  return {\n    type: TOGGLE_STAR,\n    key,\n  };\n};\n\nexport const filterTodos = (term) => (dispatch, getState) => {\n  const todos = getState().todos;\n  if (!term) term = getState().groups.filter;\n  dispatch({\n    type: FILTER_TODOS,\n    payload: todos,\n    term: term,\n  });\n};\n\nexport const rearrangeTodos = (input) => {\n  return {\n    type: REARRANGE_TODOS,\n    start: input.start,\n    end: input.end,\n    key: Number(input.key),\n  };\n};\n\nexport const toggleCompleted = (isToggled) => (dispatch, getState) => {\n  // Depending on whether isToggled is true, either the activeTodos or completedTodos\n  // is passed to the reducers\n  const todos = isToggled ? getState().activeTodos : getState().completedTodos;\n  dispatch({\n    type: TOGGLE_COMPLETED,\n    isToggled,\n    payload: todos,\n  });\n};\n\nexport const addGroup = (group) => {\n  return {\n    type: ADD_GROUP,\n    payload: group,\n  };\n};\n\nexport const deleteGroup = (key, name) => {\n  return {\n    type: DELETE_GROUP,\n    payload: key,\n    name,\n  };\n};\n\nexport const selectGroup = (name) => {\n  return {\n    type: SELECT_GROUP,\n    payload: name,\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./TodoInput.css\";\nimport { addTodo, toggleCompleted, filterTodos } from \"../../actions\";\n\nlet isToggled = false;\nclass TodoInput extends React.Component {\n  // Component state is used here to make the todo input controlled - redux could be used but it seems\n  // a bit overkill\n\n  state = { inputVal: \"\" };\n\n  handleChange = (e) => {\n    this.setState({ inputVal: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    // The addToDo action creator is called with the input value passed in as the payload\n    this.props.addTodo(this.state.inputVal);\n    this.props.filterTodos();\n    this.setState({ inputVal: \"\" });\n  };\n\n  handleClick = () => {\n    // switches the isToggled value between true and false\n    isToggled = !isToggled;\n    this.props.toggleCompleted(isToggled);\n  };\n  render() {\n    return (\n      <div>\n        <li className=\"todo--form\">\n          <form className=\"todo--frm\" onSubmit={this.handleSubmit}>\n            <input\n              className=\"todo--input\"\n              type=\"text\"\n              placeholder=\"Add a task\"\n              onChange={this.handleChange}\n              value={this.state.inputVal}\n            />\n          </form>\n        </li>\n        <button className=\"button--hide-completed\" onClick={this.handleClick}>\n          {isToggled ? \"Show Completed\" : \"Hide Completed\"}\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { todos: state.activeTodos };\n};\n\nexport default connect(mapStateToProps, {\n  addTodo,\n  toggleCompleted,\n  filterTodos,\n})(TodoInput);\n","import React from \"react\";\nimport \"./TodoItem.css\";\nimport { connect } from \"react-redux\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { toggleTodo, toggleStar, filterTodos } from \"../../actions\";\n\nclass TodoItem extends React.Component {\n  renderTodos({ todos }) {\n    todos.map((item) => {\n      return <div className=\"todo--item\">{item.item}</div>;\n    });\n  }\n  renderCircle(ticked) {\n    if (ticked) {\n      return (\n        <>\n          <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n          <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n        </>\n      );\n    }\n    return <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>;\n  }\n\n  render() {\n    return this.props.todos.map((item, index) => {\n      return (\n        <Draggable key={item.key} draggableId={String(item.key)} index={index}>\n          {(provided) => (\n            <li\n              className=\"todo--item\"\n              key={item.key}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              ref={provided.innerRef}\n            >\n              <div className=\"todo--left-items\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"todo--icon__inactive\"\n                  alt=\"checkbox\"\n                  onClick={() => {\n                    this.props.toggleTodo(item.key);\n                    this.props.filterTodos();\n                  }}\n                >\n                  {this.renderCircle(item.ticked)}\n                </svg>\n\n                <p\n                  className={\n                    item.ticked ? \"todo--text todo--text__ticked\" : \"todo--text\"\n                  }\n                >\n                  {item.item}\n                </p>\n              </div>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className={\n                  item.starred ? \"star--icon star--icon__active\" : \"star--icon\"\n                }\n                alt=\"star\"\n                onClick={() => {\n                  this.props.toggleStar(item.key);\n                  this.props.filterTodos();\n                }}\n              >\n                <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>\n              </svg>\n            </li>\n          )}\n        </Draggable>\n      );\n    });\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { todos: state.activeTodos };\n};\n\nexport default connect(mapStateToProps, {\n  toggleTodo,\n  toggleStar,\n  filterTodos,\n})(TodoItem);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nimport \"./Todos.css\";\nimport { toggleTodo, toggleStar } from \"../../actions\";\nimport TodoInput from \"../TodoInput/TodoInput\";\nimport TodoItem from \"../TodoItem/TodoItem\";\nexport class Todos extends Component {\n  render() {\n    return (\n      <div>\n        <ul className=\"todo--list\">\n          <h3 className=\"group-name\">\n            {this.props.group ? this.props.group : \"To-dos\"}\n          </h3>\n          <Droppable droppableId=\"todos\">\n            {(provided, snapshot) => {\n              return (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  style={{\n                    backgroundColor: snapshot.isDraggingOver\n                      ? \"rgba(121, 169, 169, 0.25)\"\n                      : null,\n                  }}\n                  className=\"todo--droparea\"\n                >\n                  <TodoItem />\n                  {provided.placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n\n          <TodoInput />\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { todos: state.activeTodos, group: state.groups.group };\n};\n\nexport default connect(mapStateToProps, { toggleTodo, toggleStar })(Todos);\n","import React, { Component } from \"react\";\nimport \"./CustomGroups.css\";\nimport {\n  addGroup,\n  deleteGroup,\n  filterTodos,\n  selectGroup,\n  toggleCompleted,\n} from \"../../actions\";\nimport { connect } from \"react-redux\";\n\nclass CustomGroups extends Component {\n  state = { input: \"\" };\n  handleChange = (e) => {\n    this.setState({ input: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addGroup(this.state.input);\n    this.setState({ input: \"\" });\n  };\n\n  handleDelete = (key, name) => {\n    this.props.deleteGroup(key, name);\n  };\n\n  handleGroupChange = (name) => {\n    this.props.filterTodos({ group: name });\n    this.props.selectGroup(name);\n    this.props.toggleCompleted(this.props.isToggled);\n  };\n\n  render() {\n    return (\n      <div>\n        <ul className=\"custom-groups\">\n          <div className=\"custom-groups--item-list\">\n            {this.props.groupList.map((item) => {\n              return (\n                <li className=\"custom-groups--item\" key={item.key}>\n                  <h4\n                    className=\"custom-groups--item-name\"\n                    onClick={() => this.handleGroupChange(item.name)}\n                  >\n                    {item.name}\n                  </h4>\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"24\"\n                    height=\"24\"\n                    viewBox=\"0 0 24 24\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"2\"\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    className=\"custom-groups--delete\"\n                    onClick={() => this.handleDelete(item.key, item.name)}\n                  >\n                    <path d=\"M21 4H8l-7 8 7 8h13a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2z\"></path>\n                    <line x1=\"18\" y1=\"9\" x2=\"12\" y2=\"15\"></line>\n                    <line x1=\"12\" y1=\"9\" x2=\"18\" y2=\"15\"></line>\n                  </svg>\n                </li>\n              );\n            })}\n          </div>\n          <form onSubmit={this.handleSubmit}>\n            <input\n              type=\"text\"\n              className=\"custom-groups--input\"\n              placeholder=\"Make a new group...\"\n              value={this.state.input}\n              onChange={this.handleChange}\n            ></input>\n          </form>\n        </ul>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    group: state.groups.group,\n    groupList: state.groups.groupList,\n    isToggled: state.isToggled,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  addGroup,\n  deleteGroup,\n  filterTodos,\n  selectGroup,\n  toggleCompleted,\n})(CustomGroups);\n","import React, { Component } from \"react\";\nimport \"./Sidebar.css\";\nimport { connect } from \"react-redux\";\nimport { filterTodos, toggleCompleted, selectGroup } from \"../../actions\";\nimport CustomGroups from \"../CustomGroups/CustomGroups\";\nexport class Sidebar extends Component {\n  handleClick = (filter) => {\n    this.props.selectGroup(\"\");\n    this.props.filterTodos(filter);\n    this.props.toggleCompleted(this.props.isToggled);\n  };\n  render() {\n    return (\n      <div className=\"sidebar\">\n        <ul className=\"sidebar--filter\">\n          <li\n            className=\"sidebar--filter--item all-tasks\"\n            onClick={() => this.handleClick({})}\n          >\n            <h3>All Tasks</h3>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"black\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"icon icon--all-tasks\"\n            >\n              <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\n              <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n            </svg>\n          </li>\n          <li\n            className=\"sidebar--filter--item important\"\n            onClick={() => this.handleClick({ starred: true })}\n          >\n            <h3>Important</h3>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"icon icon--important\"\n            >\n              <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>\n            </svg>\n          </li>\n          <li\n            className=\"sidebar--filter--item completed\"\n            onClick={() => this.handleClick({ ticked: true })}\n          >\n            <h3>Completed</h3>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"icon icon--completed\"\n            >\n              <polyline points=\"21 8 21 21 3 21 3 8\"></polyline>\n              <rect x=\"1\" y=\"3\" width=\"22\" height=\"5\"></rect>\n              <line x1=\"10\" y1=\"12\" x2=\"14\" y2=\"12\"></line>\n            </svg>\n          </li>\n        </ul>\n        <br />\n        <ul className=\"sidebar--groups\"></ul>\n        <CustomGroups />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todos,\n    isToggled: state.isToggled,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  filterTodos,\n  toggleCompleted,\n  selectGroup,\n})(Sidebar);\n","import React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport Todos from \"../Todos/Todos\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport { rearrangeTodos, filterTodos } from \"../../actions\";\nclass App extends React.Component {\n  onDragEnd = ({ source, destination, draggableId }) => {\n    // console.log(result);\n    if (destination) {\n      this.props.rearrangeTodos({\n        start: source.index,\n        end: destination.index,\n        key: draggableId,\n      });\n      this.props.filterTodos();\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <div className=\"sidebar--container\">\n            <Sidebar />\n          </div>\n          <Todos />\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nexport default connect(mapStateToProps, { rearrangeTodos, filterTodos })(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport reducers from \"./reducers\";\nimport App from \"./components/App/App\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}