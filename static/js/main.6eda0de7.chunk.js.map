{"version":3,"sources":["reducers/index.js","reducers/todosReducer.js","actions/ACTION_TYPES.js","reducers/activeTodosReducer.js","actions/index.js","components/TodoInput/TodoInput.js","components/TodoItem/TodoItem.js","components/Todos/Todos.js","components/Sidebar/Sidebar.js","components/App/App.js","index.js"],"names":["combineReducers","todos","state","action","type","item","payload","ticked","starred","key","length","placeholder","start","splice","end","slice","activeTodos","filterKey","Object","keys","term","filter","toggleTodo","toggleStar","isToggled","TodoInput","inputVal","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","handleClick","toggleCompleted","className","onSubmit","this","onChange","onClick","React","Component","connect","todo","dispatch","getState","TodoItem","map","d","points","cx","cy","r","index","draggableId","String","provided","draggableProps","dragHandleProps","ref","innerRef","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","alt","renderCircle","Todos","droppableId","snapshot","droppableProps","style","backgroundColor","isDraggingOver","Sidebar","filterTodos","x","y","x1","y1","x2","y2","App","onDragEnd","destination","source","rearrangeTodos","input","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6eda0de7.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\nimport todosReducer from \"./todosReducer\";\nimport activeTodosReducer from \"./activeTodosReducer\";\n\nexport default combineReducers({\n  todos: todosReducer,\n  activeTodos: activeTodosReducer,\n});\n","import {\n  ADD_TODO,\n  TOGGLE_TODO,\n  TOGGLE_STAR,\n  REARRANGE_TODOS,\n} from \"../actions/ACTION_TYPES\";\n\nexport default function todosReducer(state = [], action) {\n  switch (action.type) {\n    case ADD_TODO:\n      // A new todo with all of its needed information is added to the current state\n      return [\n        ...state,\n        {\n          item: action.payload,\n          ticked: false,\n          starred: false,\n          key: state.length,\n        },\n      ];\n\n    case REARRANGE_TODOS:\n      let placeholder = state[action.start];\n      state.splice(action.start, 1);\n      state.splice(action.end, 0, placeholder);\n\n      return [...state];\n\n    case TOGGLE_TODO:\n      // The toggled todo is grabbed and the ticked value is updated\n\n      return [\n        ...state.slice(0, action.payload),\n        {\n          ...state[action.payload],\n          ticked: !state[action.payload].ticked,\n        },\n        ...state.slice(action.payload + 1),\n      ];\n\n    case TOGGLE_STAR:\n      // Same as above, except star value is changed\n      return [\n        ...state.slice(0, action.payload),\n        {\n          ...state[action.payload],\n          starred: !state[action.payload].starred,\n        },\n        ...state.slice(action.payload + 1),\n      ];\n\n    default:\n      return state;\n  }\n}\n","export const ADD_TODO = \"ADD_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const TOGGLE_STAR = \"TOGGLE_STAR\";\nexport const FILTER_TODOS = \"FILTER_TODOS\";\nexport const REARRANGE_TODOS = \"REARRANGE_TODOS\";\nexport const TOGGLE_COMPLETED = \"TOGGLE_COMPLETED\";\n","import {\n  FILTER_TODOS,\n  ADD_TODO,\n  TOGGLE_TODO,\n  TOGGLE_STAR,\n  REARRANGE_TODOS,\n  TOGGLE_COMPLETED,\n} from \"../actions/ACTION_TYPES\";\n\nexport default function activeTodosReducer(state = [], action) {\n  switch (action.type) {\n    case FILTER_TODOS:\n      // grabs the key to sort by from the action object\n      let filterKey = Object.keys(action.term)[0];\n      // the entire todo list state is passed in from the todos store\n      return action.payload.filter(\n        // filters by the passed in parameter\n        (item) => item[filterKey] === action.term[filterKey]\n      );\n\n    case REARRANGE_TODOS:\n      let placeholder = state[action.start];\n      state.splice(action.start, 1);\n      state.splice(action.end, 0, placeholder);\n\n      return [...state];\n\n    case ADD_TODO:\n      // A new todo with all of its needed information is added to the current state\n      return [\n        ...state,\n        {\n          item: action.payload,\n          ticked: false,\n          starred: false,\n          key: state.length,\n        },\n      ];\n\n    case TOGGLE_TODO:\n      // The toggled todo is grabbed and the ticked value is updated\n\n      return [\n        ...state.slice(0, action.payload),\n        {\n          ...state[action.payload],\n          ticked: !state[action.payload].ticked,\n        },\n        ...state.slice(action.payload + 1),\n      ];\n\n    case TOGGLE_STAR:\n      // Same as above, except star value is changed\n      return [\n        ...state.slice(0, action.payload),\n        {\n          ...state[action.payload],\n          starred: !state[action.payload].starred,\n        },\n        ...state.slice(action.payload + 1),\n      ];\n\n    case TOGGLE_COMPLETED:\n      return action.payload\n        ? [...state]\n        : [...state.filter((item) => item.ticked === false)];\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_TODO,\n  TOGGLE_TODO,\n  TOGGLE_STAR,\n  FILTER_TODOS,\n  REARRANGE_TODOS,\n  TOGGLE_COMPLETED,\n} from \"./ACTION_TYPES\";\n\nexport const addTodo = (todo) => {\n  return {\n    type: ADD_TODO,\n    payload: todo,\n  };\n};\n\nexport const toggleTodo = (key) => {\n  return {\n    type: TOGGLE_TODO,\n    payload: key,\n  };\n};\n\nexport const toggleStar = (key) => {\n  return {\n    type: TOGGLE_STAR,\n    payload: key,\n  };\n};\n\nexport const filterTodos = (term) => (dispatch, getState) => {\n  const todos = getState().todos;\n\n  dispatch({\n    type: FILTER_TODOS,\n    payload: todos,\n    term: term,\n  });\n};\n\nexport const rearrangeTodos = (input) => {\n  return {\n    type: REARRANGE_TODOS,\n    start: input.start,\n    end: input.end,\n  };\n};\n\nexport const toggleCompleted = (isToggled) => (dispatch, getState) => {\n  // This doesn't work! when you send it off, it will return all the todos, regardless of whether you\n  // have filters or groups working! FIX ME!@!\n  const todos = getState().todos;\n  dispatch({\n    type: TOGGLE_COMPLETED,\n    isToggled,\n    payload: todos,\n  });\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport \"./TodoInput.css\";\nimport { addTodo, toggleCompleted } from \"../../actions\";\n\nlet isToggled = false;\nclass TodoInput extends React.Component {\n  // Component state is used here to make the todo input controlled - redux could be used but it seems\n  // a bit overkill\n\n  state = { inputVal: \"\" };\n\n  handleChange = (e) => {\n    this.setState({ inputVal: e.target.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    // The addToDo action creator is called with the input value passed in as the payload\n    this.props.addTodo(this.state.inputVal);\n    this.setState({ inputVal: \"\" });\n  };\n\n  handleClick = () => {\n    this.props.toggleCompleted(isToggled);\n    // switches the isToggled value between true and false\n    isToggled = !isToggled;\n  };\n  render() {\n    return (\n      <>\n        <li className=\"todo--form\">\n          <form className=\"todo--frm\" onSubmit={this.handleSubmit}>\n            <input\n              className=\"todo--input\"\n              type=\"text\"\n              placeholder=\"Add a task\"\n              onChange={this.handleChange}\n              value={this.state.inputVal}\n            />\n          </form>\n        </li>\n        <button className=\"button--hide-completed\" onClick={this.handleClick}>\n          Hide Completed\n        </button>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { todos: state.activeTodos };\n};\n\nexport default connect(mapStateToProps, { addTodo, toggleCompleted })(\n  TodoInput\n);\n","import React from \"react\";\nimport \"./TodoItem.css\";\nimport { connect } from \"react-redux\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { toggleTodo, toggleStar } from \"../../actions\";\n\nclass TodoItem extends React.Component {\n  renderTodos({ todos }) {\n    todos.map((item) => {\n      return <div className=\"todo--item\">{item.item}</div>;\n    });\n  }\n  renderCircle(ticked) {\n    if (ticked) {\n      return (\n        <>\n          <path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path>\n          <polyline points=\"22 4 12 14.01 9 11.01\"></polyline>\n        </>\n      );\n    }\n    return <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>;\n  }\n\n  render() {\n    return this.props.todos.map((item, index) => {\n      return (\n        <Draggable key={item.key} draggableId={String(item.key)} index={index}>\n          {(provided) => (\n            <li\n              className=\"todo--item\"\n              key={item.key}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              ref={provided.innerRef}\n            >\n              <div className=\"todo--left-items\">\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  width=\"24\"\n                  height=\"24\"\n                  viewBox=\"0 0 24 24\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"2\"\n                  strokeLinecap=\"round\"\n                  strokeLinejoin=\"round\"\n                  className=\"todo--icon__inactive\"\n                  alt=\"checkbox\"\n                  onClick={() => this.props.toggleTodo(index)}\n                >\n                  {this.renderCircle(item.ticked)}\n                </svg>\n\n                <p\n                  className={\n                    item.ticked ? \"todo--text todo--text__ticked\" : \"todo--text\"\n                  }\n                >\n                  {item.item}\n                </p>\n              </div>\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\"\n                height=\"24\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                className={\n                  item.starred ? \"star--icon star--icon__active\" : \"star--icon\"\n                }\n                alt=\"star\"\n                onClick={() => this.props.toggleStar(index)}\n              >\n                <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>\n              </svg>\n            </li>\n          )}\n        </Draggable>\n      );\n    });\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { todos: state.activeTodos };\n};\n\nexport default connect(mapStateToProps, { toggleTodo, toggleStar })(TodoItem);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Droppable } from \"react-beautiful-dnd\";\n\nimport \"./Todos.css\";\nimport { toggleTodo, toggleStar } from \"../../actions\";\nimport TodoInput from \"../TodoInput/TodoInput\";\nimport TodoItem from \"../TodoItem/TodoItem\";\nexport class Todos extends Component {\n  render() {\n    return (\n      <div>\n        <ul className=\"todo--list\">\n          <Droppable droppableId=\"todos\">\n            {(provided, snapshot) => {\n              return (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  style={{\n                    backgroundColor: snapshot.isDraggingOver\n                      ? \"rgba(121, 169, 169, 0.25)\"\n                      : null,\n                  }}\n                  className=\"todo--droparea\"\n                >\n                  <TodoItem />\n                  {provided.placeholder}\n                </div>\n              );\n            }}\n          </Droppable>\n\n          <TodoInput />\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return { todos: state.activeTodos };\n};\n\nexport default connect(mapStateToProps, { toggleTodo, toggleStar })(Todos);\n","import React, { Component } from \"react\";\nimport \"./Sidebar.css\";\nimport { connect } from \"react-redux\";\nimport { filterTodos } from \"../../actions\";\n\nexport class Sidebar extends Component {\n  render() {\n    return (\n      <div className=\"sidebar\">\n        <ul className=\"sidebar--filter\">\n          <li\n            className=\"sidebar--filter--item all-tasks\"\n            onClick={() => this.props.filterTodos({})}\n          >\n            <p>All Tasks</p>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"black\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"icon icon--all-tasks\"\n            >\n              <path d=\"M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z\"></path>\n              <polyline points=\"9 22 9 12 15 12 15 22\"></polyline>\n            </svg>\n          </li>\n          <li\n            className=\"sidebar--filter--item important\"\n            onClick={() => this.props.filterTodos({ starred: true })}\n          >\n            <p>Important</p>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"icon icon--important\"\n            >\n              <polygon points=\"12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2\"></polygon>\n            </svg>\n          </li>\n          <li\n            className=\"sidebar--filter--item completed\"\n            onClick={() => this.props.filterTodos({ ticked: true })}\n          >\n            <p>Completed</p>\n            <svg\n              xmlns=\"http://www.w3.org/2000/svg\"\n              width=\"24\"\n              height=\"24\"\n              viewBox=\"0 0 24 24\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              className=\"icon icon--completed\"\n            >\n              <polyline points=\"21 8 21 21 3 21 3 8\"></polyline>\n              <rect x=\"1\" y=\"3\" width=\"22\" height=\"5\"></rect>\n              <line x1=\"10\" y1=\"12\" x2=\"14\" y2=\"12\"></line>\n            </svg>\n          </li>\n        </ul>\n        <br />\n        <ul className=\"sidebar--groups\"></ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    todos: state.todos,\n  };\n};\n\nexport default connect(mapStateToProps, { filterTodos })(Sidebar);\n","import React from \"react\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport { connect } from \"react-redux\";\n\nimport \"./App.css\";\nimport Todos from \"../Todos/Todos\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport { rearrangeTodos } from \"../../actions\";\nclass App extends React.Component {\n  onDragEnd = ({ destination, source }) => {\n    if (destination) {\n      this.props.rearrangeTodos({\n        start: source.index,\n        end: destination.index,\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <div className=\"sidebar--container\">\n            <Sidebar />\n          </div>\n          <Todos />\n        </DragDropContext>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {};\n};\nexport default connect(mapStateToProps, { rearrangeTodos })(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport \"./index.css\";\nimport reducers from \"./reducers\";\nimport App from \"./components/App/App\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}